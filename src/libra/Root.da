from libra.Replica import Replica
from libra.Client import Client
import sys

from nacl.signing import SigningKey
from nacl.signing import VerifyKey
from nacl.encoding import HexEncoder

def main():

    number_of_procs = int(sys.argv[1]) if len(sys.argv) > 1 else 4
    number_of_reqs = int(sys.argv[2]) if len(sys.argv) > 1 else 4

     ####Keys
    replica_public_keys = []
    replica_private_keys = []

    for i in range(number_of_procs):
        signing_key = SigningKey.generate()
        verify_key = signing_key.verify_key
        verify_key_b64 = verify_key.encode(encoder=HexEncoder)
        replica_public_keys.append(verify_key_b64)
        replica_private_keys.append(signing_key)

    ##clients
    number_of_clients=1

    #cps = new(Client, num=number_of_clients)

    client_private_keys = []
    client_public_keys = []

    for i in range(number_of_clients):
        signing_key = SigningKey.generate()
        verify_key = signing_key.verify_key
        verify_key_b64 = verify_key.encode(encoder=HexEncoder)
        client_public_keys.append(verify_key_b64)
        client_private_keys.append(signing_key)

    
    f=int((number_of_procs-1)/3)
    ps = new(Replica, num= number_of_procs)
    i=0
    ps=list(ps)
    for p in ps:
        setup(p, (i,p,ps,f,number_of_reqs,replica_public_keys,client_public_keys,replica_private_keys[i]))
        i=i+1

    start(ps)

    ##clients
    
    client_reqs=1
    request_gap=0
    cps=new(Client, num= number_of_clients)
    i=0
    for cp in cps:
        setup(cp, (i,ps,f,client_reqs,request_gap))
        i=i+1
    start(cps)

    await(len(setof(a,received(('done'), from_=a)))>2*f+1)


   