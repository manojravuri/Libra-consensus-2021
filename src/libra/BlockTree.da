from .Ledger import Ledger
from collections import defaultdict

from .Objects import *


class BlockTree:
    def __init__(self, ledger, f, high_qc=None,high_commit_qc=None):
        self.ledger = ledger
        self.pending_block_tree = set()
        self.pending_votes = defaultdict(list)
        vote_info = VoteInfo(-1, -1, -2, -2)
        ledger_commit_info = LedgerCommitInfo()
        qc = QC(vote_info, ledger_commit_info)
        genesis_block = Block(0, -1, "", qc)
        self.high_qc = qc
        self.high_commit_qc = qc
        self.f = f
        # ledger.custom_commit_block(self.high_qc.block)

    def process_qc(self, qc):
        print('qc is ', str(qc))
        if qc.ledger_commit_info.commit_state_id:
            self.ledger.commit(self, qc.vote_info.parent_id)
            # prune branches
            # self.pending_block_tree.prune(qc.vote_info_parent_id)
            self.high_commit_qc = self.get_max_QC(qc, self.high_commit_qc)
        self.high_qc = self.get_max_QC(qc, self.high_qc)
        # print("process qc done")

    def execute_and_insert(self, b):
        # print(b)
        self.ledger.speculate(b.qc.block, b, b.payload)
        self.pending_block_tree.add(b)

    def process_vote(self, v):
        print("in process_vote ", v)
        self.process_qc(v.high_commit_qc)

        vote_idx = hash(v.ledger_commit_info)
        print("vote_idx is , ", vote_idx)

        self.pending_votes[vote_idx].append(v.signature)
        print("self.pending_votes[vote_idx] is , ", self.pending_votes[vote_idx])

        if self.pending_votes[vote_idx] and len(self.pending_votes[vote_idx]) == (2 * self.f + 1):
            qc = QC(vote_info=v.vote_info, votes=self.pending_votes[vote_idx])
            print("QuorumC", QC)
            return qc
        return None

    def generate_block(self, u, txns, current_round, high_qc):
        return Block(author=u, round=current_round, payload=txns, qc=high_qc)

    def get_max_QC(self, qc1, qc2):
        print("qc1",qc1.vote_info.round)
        print("qc2", qc2.vote_info.round)
        maxQC = qc1 if (qc1.vote_info.round > qc2.vote_info.round) else qc2
        return maxQC



