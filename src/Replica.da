class Replica(process):
    def setup(replica_id:int,validators:set,f:int,number_of_requests:int):
        main=Main(replica_id)

    def run():
        while(number_of_requests>0 ):
            while(sync()):
                if(main.current_leader()):
                    p=main.process_new_round_event(None)
                    broadcast(p)





    def receive(msg=('vote',m)):
        message=Message()
        message.type='vote message'
        main.start_event_processing(message)

    def recieve(msg=('proposal',m)):
        message=Message()
        message.type='proposal message'
        main.start_event_processing(message)


    def recieve(msg=('timeout',m)):
        message=Message()
        message.type='timeout message'
        main.start_event_processing(message\

    def broadcast(proposal):
        message= Message()
        message.proposal=proposal
        send(msg=('proposal',proposal), to=validators)


    def sync():
        round_number=main.get_round_number()
        send(msg=('round number',round_number),to=ps)
        --
        if(await(len(setof(recieved('round number',round_number_from_others)))==2*f+1)):
            main.sync(round_number_from_others)
            return True
        return False






def main():
    #number_of_procs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    #number_of_reqs = int(sys.argv[2]) if len(sys.argv) > 1 else 10
    number_of_procs = 10
    number_of_reqs  = 10
    f=(number_of_procs-1)/3
    ps = new(Replica, num= number_of_procs)
    i=0
    for p in ps:
        setup(p, (i,ps-{p},f,number_of_reqs))
        i=i+1

    start(ps)

