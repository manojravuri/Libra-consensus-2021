import os
import random
import string
import sys
import logging
import time


config(clock = 'Lamport')
config(handling = 'all')


class Client(process):
    def setup(client_id:int,replicas:set,f:int,number_of_requests:int,request_gap:int):
        output("creating client ", client_id)
        self.replicas=replicas
        self.number_of_requests = number_of_requests
        self.request_gap = request_gap
        self.f=f
        self.replica_timeout=5

    def broadcast_request(cmd,reps):
        c=logical_clock()
        send(('request',cmd,c,self),to=reps)
        #re-transmit
        #await(each(p in replicas, has=received(('ack', p)))): pass
        #timeout replica_timeout: broadcast_request(cmd,____)


    def run():
        for i in range(number_of_requests):
            output("client "+str(client_id)+"sleeping for "+str(request_gap))
            time.sleep(request_gap)
            cmd=str(client_id)+"----->"+str(i)
            output("client is broadcasting "+cmd)

            broadcast_request(cmd,replicas)
            #await(len(setof(a,received(('committed'), from_=a)))>2*f+1)
        output("Client ", client_id," is terminated")